https://cn.mobx.js.org/
1，通过使用 @observable 装饰器(ES.Next)来给你的类属性添加注解
import { observable } from "mobx";

class Todo {
    id = Math.random();
    @observable title = "";
    @observable finished = false;
}
2，使用 MobX， 你可以定义在相关数据发生变化时自动更新的值。 通过@computed 装饰器或者利用 (extend)Observable 时调用 的getter / setter 函数来进行使用。
class TodoList {
    @observable todos = [];
    @computed get unfinishedTodoCount() {
        return this.todos.filter(todo => !todo.finished).length;
    }
}
当添加了一个新的todo或者某个todo的 finished 属性发生变化时，MobX 会确保 unfinishedTodoCount 自动更新。 像这样的计算可以类似于 MS Excel 这样电子表格程序中的公式。每当只有在需要它们的时候，它们才会自动更新。

3，Reactions 和计算值很像，但它不是产生一个新的值，而是会产生一些副作用，比如打印到控制台、网络请求、递增地更新 React 组件树以修补DOM、等等。 简而言之，reactions 在 响应式编程和命令式编程之间建立沟通的桥梁。


4，如果你用 React 的话，可以把你的(无状态函数)组件变成响应式组件，方法是在组件上添加 observer 函数/ 装饰器. observer由 mobx-react 包提供的。

5，使用autorun、reaction 和 when 函数即可简单的创建自定义 reactions，以满足你的具体场景。

例如，每当 unfinishedTodoCount 的数量发生变化时，下面的 autorun 会打印日志消息:
autorun(() => {
    console.log("Tasks left: " + todos.unfinishedTodoCount)
})

6，状态应该以某种方式来更新。Actions(动作)


